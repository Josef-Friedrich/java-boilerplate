<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <!-- https://maven.apache.org/guides/mini/guide-naming-conventions.html -->
  <groupId>rocks.friedrich</groupId>
  <artifactId>boilerplate</artifactId>
  <version>0.1.0</version>
  <packaging>jar</packaging>

  <properties>
    <!-- BlueJ doesnâ€™t support 18 -->
    <maven.compiler.source>17</maven.compiler.source>
    <maven.compiler.target>17</maven.compiler.target>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
  </properties>

  <repositories>
    <repository>
      <id>project-repository</id>
      <url>file://${project.basedir}/repository</url>
    </repository>
  </repositories>

  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>org.junit</groupId>
        <artifactId>junit-bom</artifactId>
        <version>5.11.1</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <dependencies>
    <dependency>
      <groupId>org.apache.commons</groupId>
      <artifactId>commons-lang3</artifactId>
      <version>3.14.0</version>
    </dependency>
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter</artifactId>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <distributionManagement>
    <snapshotRepository>
      <id>ossrh</id>
      <url>https://s01.oss.sonatype.org/content/repositories/snapshots</url>
    </snapshotRepository>
  </distributionManagement>

  <build>
    <!-- Default is ${project.artifactId}-${project.version}, to get jar files without the
        version use ${project.artifactId} -->
    <finalName>${project.artifactId}-${project.version}</finalName>
    <plugins>
      <!-- https://maven.apache.org/surefire/maven-surefire-plugin/ -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>3.5.0</version>
        <configuration>
          <includes>
            <include>**/*.java</include>
          </includes>
        </configuration>
      </plugin>
      <!-- https://maven.apache.org/plugins/maven-jar-plugin/ -->
      <!-- https://maven.apache.org/plugins/maven-jar-plugin/jar-mojo.html -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
        <version>3.4.2</version>
        <configuration>
          <archive>
            <manifest>
              <addClasspath>true</addClasspath>
              <mainClass>rocks.friedrich.boilerplate.Boilerplate</mainClass>
            </manifest>
          </archive>
        </configuration>
      </plugin>
      <!-- Creates a jar archive of the source files of the current project. The jar file is, by
        default, created in the project's target directory. -->
      <!-- https://maven.apache.org/plugins/maven-source-plugin/ -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-source-plugin</artifactId>
        <version>3.3.1</version>
        <executions>
          <execution>
            <id>attach-sources</id>
            <goals>
              <goal>jar-no-fork</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <!-- Uses the Javadoc tool to generate javadocs for the specified project. -->
      <!-- https://maven.apache.org/plugins/maven-javadoc-plugin/ -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-javadoc-plugin</artifactId>
        <version>3.12.0</version>
        <configuration>
          <!-- https://maven.apache.org/plugins/maven-javadoc-plugin/javadoc-mojo.html#show -->
          <show>private</show>
          <!--
          https://maven.apache.org/plugins/maven-javadoc-plugin/javadoc-mojo.html#javadocexecutable -->
          <javadocExecutable>${java.home}/bin/javadoc</javadocExecutable>
          <!-- https://maven.apache.org/plugins/maven-javadoc-plugin/javadoc-mojo.html#doclint -->
          <!-- to disable the "missing" warnings -->
          <doclint>all,-missing</doclint>

          <!--
                    https://maven.apache.org/plugins/maven-javadoc-plugin/examples/links-configuration.html -->
          <links>
            <link>https://javadoc.io/doc/de.pirckheimer-gymnasium/engine-pi/latest</link>
          </links>

          <!--
                    https://maven.apache.org/plugins/maven-javadoc-plugin/examples/stylesheet-configuration.html -->
          <stylesheetfile>javadoc-stylesheet.css</stylesheetfile>
          <!-- https://maven.apache.org/plugins/maven-javadoc-plugin/javadoc-mojo.html#verbose -->
          <!-- To disable verbose output for each class -->
          <verbose>false</verbose>
        </configuration>
        <dependencies>
          <dependency>
            <groupId>de.pirckheimer-gymnasium</groupId>
            <artifactId>engine-pi</artifactId>
            <version>0.29.0</version>
          </dependency>
        </dependencies>
        <executions>
          <execution>
            <id>attach-javadocs</id>
            <goals>
              <goal>jar</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <!-- https://maven.apache.org/plugins/maven-assembly-plugin/ -->
      <!-- https://maven.apache.org/plugins/maven-assembly-plugin/usage.html -->
      <!-- https://maven.apache.org/plugins/maven-assembly-plugin/single-mojo.html -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-assembly-plugin</artifactId>
        <version>3.7.1</version>
        <configuration>
          <!-- Set to false to exclude the assembly id from the assembly final name, and
                    to create the resultant assembly artifacts without classifier. As such, an
                    assembly artifact having the same format as the packaging of the current Maven
                    project will replace the file for this main project artifact. -->
          <appendAssemblyId>false</appendAssemblyId>
          <descriptorRefs>
            <descriptorRef>jar-with-dependencies</descriptorRef>
          </descriptorRefs>
          <archive>
            <manifest>
              <addClasspath>true</addClasspath>
              <mainClass>rocks.friedrich.boilerplate.Boilerplate</mainClass>
            </manifest>
          </archive>
        </configuration>
        <executions>
          <execution>
            <id>make-assembly</id>
            <phase>package</phase>
            <goals>
              <goal>single</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <!-- Signs all of a project's attached artifacts with GnuPG. -->
      <!-- https://maven.apache.org/plugins/maven-gpg-plugin/usage.html -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-gpg-plugin</artifactId>
        <version>3.2.4</version>
        <executions>
          <execution>
            <id>sign-artifacts</id>
            <phase>verify</phase>
            <goals>
              <goal>sign</goal>
            </goals>
            <configuration>
              <!-- This is necessary for gpg to not try to use the pinentry programs -->
              <gpgArguments>
                <arg>--pinentry-mode</arg>
                <arg>loopback</arg>
              </gpgArguments>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <!--
        http://www.mojohaus.org/exec-maven-plugin/usage.html
        mvn exec:java
      -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>exec-maven-plugin</artifactId>
        <version>3.2.0</version>
        <executions>
          <execution>
            <goals>
              <goal>java</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <mainClass>rocks.friedrich.boilerplate.Boilerplate</mainClass>
        </configuration>
      </plugin>
      <!-- https://central.sonatype.org/publish/publish-portal-maven/ -->
      <plugin>
        <groupId>org.sonatype.central</groupId>
        <artifactId>central-publishing-maven-plugin</artifactId>
        <version>0.5.0</version>
        <extensions>true</extensions>
        <configuration>
          <!-- see ~/.m2/settings.xml -->
          <publishingServerId>central</publishingServerId>
          <tokenAuth>true</tokenAuth>
          <autoPublish>true</autoPublish>
        </configuration>
      </plugin>

      <!-- Formatting java source code using the Eclipse code formatter. -->
      <!-- https://code.revelc.net/formatter-maven-plugin/usage.html -->
      <plugin>
        <groupId>net.revelc.code.formatter</groupId>
        <artifactId>formatter-maven-plugin</artifactId>
        <version>2.29.0</version>
        <configuration>
          <configFile>${project.basedir}/.formatter/school.xml</configFile>
        </configuration>
      </plugin>

      <!-- https://code.revelc.net/impsort-maven-plugin/ -->
      <plugin>
        <groupId>net.revelc.code</groupId>
        <artifactId>impsort-maven-plugin</artifactId>
        <version>1.9.0</version>
        <configuration>
          <groups>java.,javax.,org.,com.</groups>
          <staticGroups>java,*</staticGroups>
          <excludes>
            <exclude>**/thrift/*.java</exclude>
          </excludes>
        </configuration>
        <executions>
          <execution>
            <id>sort-imports</id>
            <goals>
              <goal>sort</goal><!-- runs at process-sources phase by default -->
            </goals>
          </execution>
        </executions>
      </plugin>

    </plugins>
  </build>

</project>
